generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RolesEnum {
  ADMIN
  ACADEMICO
  USUARIO
}

model Usuario {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password_hash  String?   
  nombre         String
  apellido       String
  rol            RolesEnum  @default(USUARIO)
  activo         Boolean   @default(true)
  // NUEVOS CAMPOS PARA VERIFICACIÓN
  email_verificado      Boolean   @default(false)
  codigo_verificacion   String?
  codigo_expiracion     DateTime?
  fecha_registro DateTime  @default(now())
  ultimo_acceso  DateTime?
  avatar_url     String?   @db.VarChar(500)
  bio            String?

  google_id      String?   @unique
  provider       String?   @default("local")
  
  

  Inscripcion Inscripcion[]
}

model Curso {
  id                Int      @id @default(autoincrement())
  nombre            String   @db.VarChar(100)
  descripcion       String?  @db.Text
  codigo_curso      String   @unique @db.VarChar(20)
  activo            Boolean  @default(true)
  fecha_creacion    DateTime @default(now())
  creado_por        String?  @db.VarChar(100)
  UnidadPlantilla   UnidadPlantilla[]
  Edicion           Edicion[]
  estado_publicado  Boolean  @default(false)
}

model Edicion {
  id                  Int       @id @default(autoincrement())
  curso               Curso     @relation(fields: [id_curso], references: [id])
  id_curso            Int
  nombre_edicion      String    @db.VarChar(200)
  descripcion         String?   @db.Text
  fecha_apertura      DateTime
  fecha_cierre        DateTime?
  activo              Boolean   @default(true)
  fecha_creacion      DateTime  @default(now())
  creado_por          String    @db.VarChar(100)
  unidades            Unidad[]  
  estado_publicado    Boolean  @default(false)

  Inscripcion Inscripcion[]
}

model UnidadPlantilla {
  id              Int       @id @default(autoincrement())
  curso           Curso     @relation(fields: [id_curso], references: [id])
  id_curso        Int
  titulo          String    @db.VarChar(200)
  descripcion     String?   @db.Text
  orden           Int
  version         Int
  icono           String?   @db.VarChar(100)
  color           String?   @db.VarChar(20)
  fecha_creacion  DateTime  @default(now())
  activo          Boolean   @default(true)
  //unidades      Unidad[]  
  TopicoPlantilla TopicoPlantilla[]
}

model Unidad {
  id                  Int             @id @default(autoincrement())
  edicion             Edicion         @relation(fields: [id_edicion], references: [id])
  id_edicion          Int
  id_unidad_plantilla Int?
  titulo              String          @db.VarChar(200)
  descripcion         String?         @db.Text
  orden               Int
  icono               String?         @db.VarChar(100)
  color               String?         @db.VarChar(20)
  estado_publicado    Boolean         @default(false)
  fecha_creacion      DateTime        @default(now())
  fecha_actualizacion DateTime?
  activo              Boolean         @default(true)
  //topicos            Topico[]        // relación con tópicos
  //ejercicios         Ejercicio[]     // relación con ejercicios

  Topico Topico[]
}

model TopicoPlantilla {
  id                   Int       @id @default(autoincrement())
  unidadPlantilla      UnidadPlantilla @relation(fields: [id_unidad_plantilla], references: [id])
  id_unidad_plantilla  Int
  titulo               String    @db.VarChar(200)
  descripcion          String?   @db.Text
  duracion_estimada    Int
  orden                Int
  version              Int
  publicado            Boolean   @default(false)
  objetivos_aprendizaje String?  @db.Text
  fecha_creacion       DateTime  @default(now())
  activo               Boolean   @default(true)

  prerequisitos        TopicoPlantilla[]  @relation("TopicoPlantillaPrerequisitos")
  requeridos_por       TopicoPlantilla[]  @relation("TopicoPlantillaPrerequisitos")


  // a futuro
  // contenidosPlantilla ContenidoPlantilla[] y demas cosas que sean necesarias
}

model Topico {
  id                   Int       @id @default(autoincrement())
  unidad               Unidad    @relation(fields: [id_unidad], references: [id])
  id_unidad            Int
  id_topico_plantilla  Int?      
  titulo               String    @db.VarChar(200)
  descripcion          String?   @db.Text
  duracion_estimada    Int
  orden                Int
  publicado            Boolean   @default(false)
  objetivos_aprendizaje String?  @db.Text
  fecha_creacion       DateTime  @default(now())
  fecha_actualizacion  DateTime?
  activo               Boolean   @default(true)

  prerequisitos        Topico[]  @relation("TopicoPrerequisitos")
  requeridos_por       Topico[]  @relation("TopicoPrerequisitos")

  // a futuro: contenidos específicos de la edición
  // contenidos Contenido[]
}

model Cargo {
  id          Int              @id @default(autoincrement())
  nombre      String           @unique @db.VarChar(100)
  inscripciones Inscripcion[]  // relación inversa
}

model Inscripcion {
  id               Int       @id @default(autoincrement())
  usuario          Usuario   @relation(fields: [usuario_id], references: [id])
  usuario_id       Int
  edicion          Edicion   @relation(fields: [edicion_id], references: [id])
  edicion_id       Int
  cargo            Cargo     @relation(fields: [cargo_id], references: [id])
  cargo_id         Int
  fecha_inscripcion DateTime  @default(now())
  fecha_terminacion DateTime?
  activo            Boolean   @default(true)

  @@unique([usuario_id, edicion_id])
}
