# @format

# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
    push:
        branches: ["main", "develop"]
    pull_request:
        branches: ["main"]

jobs:
    test:
        name: Test Backend
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [22.x]

        services:
            postgres:
                image: postgres:16
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: pyground_test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"
                  cache-dependency-path: "./back/package-lock.json"

            - name: Install dependencies
              working-directory: ./back
              run: npm ci

            - name: Create .env.test file
              working-directory: ./back
              run: |
                  echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pyground_test" > .env.test
                  echo "NODE_ENV=test" >> .env.test
                  echo "SESSION_SECRET=test-secret-key-for-ci" >> .env.test
                  echo "CLIENT_URL=http://localhost:3000" >> .env.test
                  echo "PORT=5001" >> .env.test

            - name: Generate Prisma Client
              working-directory: ./back
              run: npx prisma generate

            - name: Run Prisma migrations
              working-directory: ./back
              run: npx prisma migrate deploy
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pyground_test

            - name: Run tests
              working-directory: ./back
              run: npm test
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pyground_test
                  NODE_ENV: test
                  
            - name: Run ESLint
              working-directory: ./back
              run: npm run lint
